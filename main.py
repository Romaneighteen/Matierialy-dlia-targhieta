import os
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
BONUS_FILE_URL = os.getenv("BONUS_FILE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

user_reviews = {}
users_received_bonus = set()
USERS_FILE = "users.json"

ASK_REVIEW = 1

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def add_user(user):
    users = load_users()
    if not any(u["id"] == user.id for u in users):
        users.append({
            "id": user.id,
            "username": user.username,
            "name": user.first_name,
            "status": "new",
            "joined": datetime.now().strftime("%Y-%m-%d")
        })
        save_users(users)

def update_user_status(user_id, new_status):
    users = load_users()
    for u in users:
        if u["id"] == user_id:
            u["status"] = new_status
            break
    save_users(users)

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user)

    keyboard = [
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
        [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="get_bonus")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ –∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n\n"
        "üì¢ https://t.me/tg_protarget",
        reply_markup=reply_markup
    )

# --- –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "leave_review":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–º–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤):")
        return ASK_REVIEW

    elif query.data == "get_bonus":
        if user_id not in user_reviews:
            await query.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤, –∑–∞—Ç–µ–º —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.")
            return ConversationHandler.END

        chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if chat_member.status not in ['member', 'administrator', 'creator']:
            await query.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/tg_protarget")
            return ConversationHandler.END

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
        await query.message.reply_text(f"üìé –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n{BONUS_FILE_URL}")
        users_received_bonus.add(user_id)
        update_user_status(user_id, "–ø–æ–ª—É—á–∏–ª_–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ ---
async def handle_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    review_text = update.message.text.strip()

    if len(review_text) < 30:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ (–æ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤).")
        return ASK_REVIEW

    user_reviews[user_id] = review_text

    await context.bot.send_message(chat_id=ADMIN_ID,
                                   text=f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{user.username}:\n\n{review_text}")

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üëá")

    keyboard = [[InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="get_bonus")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å:",
                                    reply_markup=reply_markup)
    return ConversationHandler.END

# --- –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ---
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    msg = " ".join(context.args)
    if not msg:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /broadcast –≤–∞—à —Ç–µ–∫—Å—Ç")
        return

    users = load_users()
    count = 0
    for user in users:
        try:
            await context.bot.send_message(chat_id=user["id"], text=msg)
            count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user['id']}: {e}")
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={ASK_REVIEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review)]},
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
