import os
import json
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, CallbackQueryHandler
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
BONUS_FILE_URL = os.getenv("BONUS_FILE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
USER_DATA_FILE = "users.json"
REVIEW_DATA_FILE = "reviews.json"

user_reviews = {}
waiting_for_review = set()
waiting_for_check = {}
sent_bonus = set()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(user_id, username):
    record = {
        "user_id": user_id,
        "username": username,
        "timestamp": datetime.now().isoformat()
    }
    try:
        with open(USER_DATA_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(record, ensure_ascii=False) + "\n")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
def save_review(user_id, username, text):
    record = {
        "user_id": user_id,
        "username": username,
        "text": text,
        "timestamp": datetime.now().isoformat()
    }
    try:
        with open(REVIEW_DATA_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(record, ensure_ascii=False) + "\n")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(bot, user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª(–∞) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. –û–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω—É–∂–Ω–æ:\n"
        "1. –û—Å—Ç–∞–≤–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ (25+ —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "2. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}\n"
        "3. –ù–∞–∂–∞—Ç—å \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" –ø–æ—Å–ª–µ –æ—Ç–∑—ã–≤–∞"
    ).format(channel=CHANNEL_USERNAME)

    await update.message.reply_text(text, reply_markup=reply_markup)

# –ö–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    username = query.from_user.username or "–±–µ–∑ username"
    await query.answer()

    if query.data == "leave_review":
        waiting_for_review.add(user_id)
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤. –ù–µ –º–µ–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤.")

    elif query.data == "check_subscription":
        if await is_subscribed(context.bot, user_id):
            if user_id in user_reviews and user_id not in sent_bonus:
                msg = await query.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {BONUS_FILE_URL}")
                save_user(user_id, username)
                sent_bonus.add(user_id)
                waiting_for_check[user_id] = msg.message_id
                asyncio.create_task(delayed_subscription_check(context.bot, user_id, msg.chat.id, msg.message_id))
            else:
                await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤.")
        else:
            await query.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
async def delayed_subscription_check(bot, user_id, chat_id, message_id):
    await asyncio.sleep(300)
    if not await is_subscribed(bot, user_id):
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            await bot.send_message(chat_id=chat_id, text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞.")
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ ‚Äî –æ—Ç–∑—ã–≤—ã
async def handle_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑ username"
    text = update.message.text.strip()

    if user_id not in waiting_for_review:
        return

    if len(text) < 25:
        await update.message.reply_text("–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ (–æ—Ç 25 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    user_reviews[user_id] = text
    waiting_for_review.remove(user_id)
    save_review(user_id, username, text)
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"üë§ –û—Ç–∑—ã–≤ –æ—Ç @{username} (ID: {user_id}):\n{text}")

    keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.", reply_markup=reply_markup)

# ================== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ==================

async def users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()[-10:]
            users = [json.loads(line) for line in lines]
        msg = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"@{u['username']} ({u['user_id']})" for u in users])
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json: {e}")

async def reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        with open(REVIEW_DATA_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()[-10:]
            reviews = [json.loads(line) for line in lines]
        msg = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n" + "\n\n".join([f"@{r['username']} ({r['user_id']}):\n{r['text']}" for r in reviews])
        await update.message.reply_text(msg[:4096])
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è reviews.json: {e}")

async def export_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        await update.message.reply_document(InputFile(REVIEW_DATA_FILE))
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")

async def export_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        await update.message.reply_document(InputFile(USER_DATA_FILE))
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç: /broadcast –¢–≤–æ–π –±–æ–Ω—É—Å!")
        return
    text = " ".join(context.args)
    count = 0
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            for line in f:
                user = json.loads(line)
                try:
                    await context.bot.send_message(chat_id=user["user_id"], text=text)
                    count += 1
                    await asyncio.sleep(0.1)
                except:
                    continue
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

# –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
async def test_write(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        test_data = {"test": True, "timestamp": datetime.now().isoformat()}
        with open("test_write.json", "w", encoding="utf-8") as f:
            json.dump(test_data, f, ensure_ascii=False)
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")

# ========== –ó–∞–ø—É—Å–∫ ==========

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("users", users))
    app.add_handler(CommandHandler("reviews", reviews))
    app.add_handler(CommandHandler("export_reviews", export_reviews))
    app.add_handler(CommandHandler("export_users", export_users))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("test_write", test_write))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
